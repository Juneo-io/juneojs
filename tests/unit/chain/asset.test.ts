import { AssetValue } from '../../../src'

describe('AssetValue', (): void => {
  test('Readable value rounded', (): void => {
    let value: AssetValue = new AssetValue(BigInt(10), -1)
    expect(value.getReadableValueRounded(1)).toBe('10')
    expect(value.getReadableValueRounded(0)).toBe('10')
    expect(value.getReadableValueRounded(-1)).toBe('10')
    value = new AssetValue(BigInt(10), 0)
    expect(value.getReadableValueRounded(1)).toBe('10')
    expect(value.getReadableValueRounded(0)).toBe('10')
    expect(value.getReadableValueRounded(-1)).toBe('10')
    value = new AssetValue(BigInt(10), 1)
    expect(value.getReadableValueRounded(2)).toBe('1.0')
    expect(value.getReadableValueRounded(1)).toBe('1.0')
    expect(value.getReadableValueRounded(0)).toBe('1')
    expect(value.getReadableValueRounded(-1)).toBe('1')
    value = new AssetValue(BigInt(10), 2)
    expect(value.getReadableValueRounded(3)).toBe('0.10')
    expect(value.getReadableValueRounded(2)).toBe('0.10')
    expect(value.getReadableValueRounded(1)).toBe('0.1')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    value = new AssetValue(BigInt(10), 3)
    expect(value.getReadableValueRounded(4)).toBe('0.010')
    expect(value.getReadableValueRounded(3)).toBe('0.010')
    expect(value.getReadableValueRounded(2)).toBe('0.01')
    expect(value.getReadableValueRounded(1)).toBe('0.0')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    value = new AssetValue(BigInt(123), -1)
    expect(value.getReadableValueRounded(2)).toBe('123')
    expect(value.getReadableValueRounded(1)).toBe('123')
    expect(value.getReadableValueRounded(0)).toBe('123')
    expect(value.getReadableValueRounded(-1)).toBe('123')
    value = new AssetValue(BigInt(123), 0)
    expect(value.getReadableValueRounded(2)).toBe('123')
    expect(value.getReadableValueRounded(1)).toBe('123')
    expect(value.getReadableValueRounded(0)).toBe('123')
    expect(value.getReadableValueRounded(-1)).toBe('123')
    value = new AssetValue(BigInt(123), 1)
    expect(value.getReadableValueRounded(2)).toBe('12.3')
    expect(value.getReadableValueRounded(1)).toBe('12.3')
    expect(value.getReadableValueRounded(0)).toBe('12')
    expect(value.getReadableValueRounded(-1)).toBe('12')
    value = new AssetValue(BigInt(123), 2)
    expect(value.getReadableValueRounded(3)).toBe('1.23')
    expect(value.getReadableValueRounded(2)).toBe('1.23')
    expect(value.getReadableValueRounded(1)).toBe('1.2')
    expect(value.getReadableValueRounded(0)).toBe('1')
    expect(value.getReadableValueRounded(-1)).toBe('1')
    value = new AssetValue(BigInt(123), 3)
    expect(value.getReadableValueRounded(4)).toBe('0.123')
    expect(value.getReadableValueRounded(3)).toBe('0.123')
    expect(value.getReadableValueRounded(2)).toBe('0.12')
    expect(value.getReadableValueRounded(1)).toBe('0.1')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    value = new AssetValue(BigInt(123), 4)
    expect(value.getReadableValueRounded(5)).toBe('0.0123')
    expect(value.getReadableValueRounded(4)).toBe('0.0123')
    expect(value.getReadableValueRounded(3)).toBe('0.012')
    expect(value.getReadableValueRounded(2)).toBe('0.01')
    expect(value.getReadableValueRounded(1)).toBe('0.0')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    // negative values
    value = new AssetValue(BigInt(-10), -1)
    expect(value.getReadableValueRounded(1)).toBe('-10')
    expect(value.getReadableValueRounded(0)).toBe('-10')
    expect(value.getReadableValueRounded(-1)).toBe('-10')
    value = new AssetValue(BigInt(-10), 0)
    expect(value.getReadableValueRounded(1)).toBe('-10')
    expect(value.getReadableValueRounded(0)).toBe('-10')
    expect(value.getReadableValueRounded(-1)).toBe('-10')
    value = new AssetValue(BigInt(-10), 1)
    expect(value.getReadableValueRounded(2)).toBe('-1.0')
    expect(value.getReadableValueRounded(1)).toBe('-1.0')
    expect(value.getReadableValueRounded(0)).toBe('-1')
    expect(value.getReadableValueRounded(-1)).toBe('-1')
    value = new AssetValue(BigInt(-10), 2)
    expect(value.getReadableValueRounded(3)).toBe('-0.10')
    expect(value.getReadableValueRounded(2)).toBe('-0.10')
    expect(value.getReadableValueRounded(1)).toBe('-0.1')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    value = new AssetValue(BigInt(-10), 3)
    expect(value.getReadableValueRounded(4)).toBe('-0.010')
    expect(value.getReadableValueRounded(3)).toBe('-0.010')
    expect(value.getReadableValueRounded(2)).toBe('-0.01')
    expect(value.getReadableValueRounded(1)).toBe('0.0')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    value = new AssetValue(BigInt(-123), -1)
    expect(value.getReadableValueRounded(2)).toBe('-123')
    expect(value.getReadableValueRounded(1)).toBe('-123')
    expect(value.getReadableValueRounded(0)).toBe('-123')
    expect(value.getReadableValueRounded(-1)).toBe('-123')
    value = new AssetValue(BigInt(-123), 0)
    expect(value.getReadableValueRounded(2)).toBe('-123')
    expect(value.getReadableValueRounded(1)).toBe('-123')
    expect(value.getReadableValueRounded(0)).toBe('-123')
    expect(value.getReadableValueRounded(-1)).toBe('-123')
    value = new AssetValue(BigInt(-123), 1)
    expect(value.getReadableValueRounded(2)).toBe('-12.3')
    expect(value.getReadableValueRounded(1)).toBe('-12.3')
    expect(value.getReadableValueRounded(0)).toBe('-12')
    expect(value.getReadableValueRounded(-1)).toBe('-12')
    value = new AssetValue(BigInt(-123), 2)
    expect(value.getReadableValueRounded(3)).toBe('-1.23')
    expect(value.getReadableValueRounded(2)).toBe('-1.23')
    expect(value.getReadableValueRounded(1)).toBe('-1.2')
    expect(value.getReadableValueRounded(0)).toBe('-1')
    expect(value.getReadableValueRounded(-1)).toBe('-1')
    value = new AssetValue(BigInt(-123), 3)
    expect(value.getReadableValueRounded(4)).toBe('-0.123')
    expect(value.getReadableValueRounded(3)).toBe('-0.123')
    expect(value.getReadableValueRounded(2)).toBe('-0.12')
    expect(value.getReadableValueRounded(1)).toBe('-0.1')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    value = new AssetValue(BigInt(-123), 4)
    expect(value.getReadableValueRounded(5)).toBe('-0.0123')
    expect(value.getReadableValueRounded(4)).toBe('-0.0123')
    expect(value.getReadableValueRounded(3)).toBe('-0.012')
    expect(value.getReadableValueRounded(2)).toBe('-0.01')
    expect(value.getReadableValueRounded(1)).toBe('0.0')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    // zero values
    value = new AssetValue(BigInt(0), -1)
    expect(value.getReadableValueRounded(1)).toBe('0')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    value = new AssetValue(BigInt(0), 0)
    expect(value.getReadableValueRounded(1)).toBe('0')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
    value = new AssetValue(BigInt(0), 1)
    expect(value.getReadableValueRounded(1)).toBe('0.0')
    expect(value.getReadableValueRounded(0)).toBe('0')
    expect(value.getReadableValueRounded(-1)).toBe('0')
  })

  test('Readable value padded', (): void => {
    let value: AssetValue = new AssetValue(BigInt(10), -1)
    expect(value.getReadableValuePadded()).toBe('10')
    value = new AssetValue(BigInt(10), 0)
    expect(value.getReadableValuePadded()).toBe('10')
    value = new AssetValue(BigInt(10), 1)
    expect(value.getReadableValuePadded()).toBe('1.0')
    value = new AssetValue(BigInt(10), 2)
    expect(value.getReadableValuePadded()).toBe('0.10')
    value = new AssetValue(BigInt(10), 3)
    expect(value.getReadableValuePadded()).toBe('0.010')
    // negative values
    value = new AssetValue(BigInt(-10), -1)
    expect(value.getReadableValuePadded()).toBe('-10')
    value = new AssetValue(BigInt(-10), 0)
    expect(value.getReadableValuePadded()).toBe('-10')
    value = new AssetValue(BigInt(-10), 1)
    expect(value.getReadableValuePadded()).toBe('-1.0')
    value = new AssetValue(BigInt(-10), 2)
    expect(value.getReadableValuePadded()).toBe('-0.10')
    value = new AssetValue(BigInt(-10), 3)
    expect(value.getReadableValuePadded()).toBe('-0.010')
    // zero values
    value = new AssetValue(BigInt(0), -1)
    expect(value.getReadableValuePadded()).toBe('0')
    value = new AssetValue(BigInt(0), 0)
    expect(value.getReadableValuePadded()).toBe('0')
    value = new AssetValue(BigInt(0), 1)
    expect(value.getReadableValuePadded()).toBe('0.0')
  })

  test('Readable value', (): void => {
    let value: AssetValue = new AssetValue(BigInt(10), -1)
    expect(value.getReadableValue()).toBe('10')
    value = new AssetValue(BigInt(10), 0)
    expect(value.getReadableValue()).toBe('10')
    value = new AssetValue(BigInt(10), 1)
    expect(value.getReadableValue()).toBe('1')
    value = new AssetValue(BigInt(10), 2)
    expect(value.getReadableValue()).toBe('0.1')
    value = new AssetValue(BigInt(10), 3)
    expect(value.getReadableValue()).toBe('0.01')
    // negative values
    value = new AssetValue(BigInt(-10), -1)
    expect(value.getReadableValue()).toBe('-10')
    value = new AssetValue(BigInt(-10), 0)
    expect(value.getReadableValue()).toBe('-10')
    value = new AssetValue(BigInt(-10), 1)
    expect(value.getReadableValue()).toBe('-1')
    value = new AssetValue(BigInt(-10), 2)
    expect(value.getReadableValue()).toBe('-0.1')
    value = new AssetValue(BigInt(-10), 3)
    expect(value.getReadableValue()).toBe('-0.01')
    // zero values
    value = new AssetValue(BigInt(0), -1)
    expect(value.getReadableValue()).toBe('0')
    value = new AssetValue(BigInt(0), 0)
    expect(value.getReadableValue()).toBe('0')
    value = new AssetValue(BigInt(0), 1)
    expect(value.getReadableValue()).toBe('0')
  })
})
